/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.drauschke.HomeNetworkService.api;

import de.drauschke.HomeNetworkService.model.Error;
import de.drauschke.HomeNetworkService.model.SpeedtestResult;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-10-26T20:21:52.118154+01:00[Europe/Berlin]")

@Validated
@Api(value = "Speedtest", description = "the Speedtest API")
public interface SpeedtestApi {

    /**
     * GET /speedtest
     * Measures the results of an successful speedtest and persists the result.
     *
     * @return Indicates that the speedtest was successful and returns its result. (status code 200)
     *         or Indicates that an serverside error occured. The speedtest was not successful and no result is returned. (status code 500)
     */
    @ApiOperation(value = "", nickname = "speedtestGet", notes = "Measures the results of an successful speedtest and persists the result.", response = SpeedtestResult.class, tags={ "Speedtest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that the speedtest was successful and returns its result.", response = SpeedtestResult.class),
        @ApiResponse(code = 500, message = "Indicates that an serverside error occured. The speedtest was not successful and no result is returned.", response = Error.class) })
    @RequestMapping(value = "/speedtest",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<SpeedtestResult> speedtestGet();


    /**
     * GET /speedtest-history
     * Get history data of executed Speedtests if available.
     *
     * @param month Specifies the month for the retrieved history data. (required)
     * @param year Specifies the year for the retrieved history data. (required)
     * @return Indicates that the history was retrieved successful. (status code 200)
     *         or Indicates that an serverside error occured. The speedtest was not successful and no result is returned. (status code 500)
     */
    @ApiOperation(value = "", nickname = "speedtestHistoryGet", notes = "Get history data of executed Speedtests if available.", response = SpeedtestResult.class, responseContainer = "List", tags={ "Speedtest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Indicates that the history was retrieved successful.", response = SpeedtestResult.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Indicates that an serverside error occured. The speedtest was not successful and no result is returned.", response = Error.class) })
    @RequestMapping(value = "/speedtest-history",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<SpeedtestResult>> speedtestHistoryGet(@NotNull @ApiParam(value = "Specifies the month for the retrieved history data.", required = true, allowableValues = "Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec", defaultValue = "Jan") @Valid @RequestParam(value = "month", required = true, defaultValue="Jan") String month,@NotNull @Min(2020)@ApiParam(value = "Specifies the year for the retrieved history data.", required = true, defaultValue = "2020") @Valid @RequestParam(value = "year", required = true, defaultValue="2020") Integer year);

}
